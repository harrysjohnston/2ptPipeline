[runtime]
sampler=test
root=${COSMOSIS_SRC_DIR}

[DEFAULT]
; your own working directory here
wdir=/Users/Harry/2ptPipeline/ECHOIA/IAmodeling/notebooks/cosmosis_wgplus
; Hankel integration specifications
; 'ell' is wavevector k
; 'theta' is comoving transverse separation r_p
; these broad windows seem to perform best
ell_min=1e-8
ell_max=1e3
th_min=3e-5
th_max=3e8

[test]
save_dir=datablock
fatal_errors=T
analyze_fast_slow=F

[pipeline]
; modules written specifically for this pipeline are coerce_pk.py and projected_alignments_interface.py
modules=consistency camb halofit nonlinear_linear_alignment ia_z_powerlaw constant_bias load_nz coerce_gg coerce_gI coerce_II project_gg project_gI project_II collect_wgg collect_wgp collect_wpp
values=%(wdir)s/values.ini
priors=
likelihoods=
quiet=F
timing=T
debug=T

; Standard CosmoSIS modules for computation of basic power spectra
[consistency]
file=cosmosis-standard-library/utility/consistency/consistency_interface.py
[camb]
file=cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=2
zmin=0.0
zmax=2.0
nz=200
[halofit]
file=cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so
kmin=0.0001
kmax=1000.
nk=1000
[extrapolate]
file=cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py 
kmax=500.
[growthfunction]
file=cosmosis-standard-library/structure/growth_factor/interface.so
zmin=0.0
zmax=1.0
dz=0.01

[nonlinear_linear_alignment]
; linear models for IA here
file=cosmosis-standard-library/intrinsic_alignments/la_model/linear_alignments_interface.py
; choose linear (LA), bk_corrected (NLA)
method=bk_corrected
; other models just need to generate the
; intrinsic_power and matter_intrinsic_power
; sections containing IA P(k)'s

[ia_z_powerlaw]
; 'alpha' parameter in values.ini can be used to include redshift evolution of IA (called 'eta' in some of the literature)
file=cosmosis-standard-library/intrinsic_alignments/z_powerlaw/ia_z_powerlaw.py

[constant_bias]
; apply linear galaxy bias to matter spectra
file=cosmosis-standard-library/bias/constant_bias/constant_bias.py

[load_nz]
; load redshift distribution(s) over which to integrate P(k)'s
; more complex analyses are likely to require multiple n(z)'s
file=cosmosis-standard-library/number_density/load_nz/load_nz.py
filepath=%(wdir)s/nofz.txt
output_section=nz_test

; these modules will take the P(k, z) computations from previous modules
; and re-save them in the same sections with new names/formats. Wavevectors
; k_h will become 'ell', the P(k) from each redshift z (index i)
; will become 'bin_i_i', and the number of redshift samples is saved as 'nbin'
[coerce_gg]
file=%(wdir)s/coerce_pk.py
power_section=galaxy_power
nz_section=nz_test
[coerce_gI]
file=%(wdir)s/coerce_pk.py
power_section=galaxy_intrinsic_power
nz_section=nz_test
[coerce_II]
file=%(wdir)s/coerce_pk.py
power_section=intrinsic_power
nz_section=nz_test

; CosmoSIS default Hankel transformation modules are now able to read
; from the above sections, and perform appropriate integrations. The
; corr_type argument specifies the order of Bessel functions; 'w' for
; zeroth, 'gamma' for second, and 'xi' for zeroth and fourth
[project_gg]
file=cosmosis-standard-library/shear/cl_to_corr/cl_to_corr.py
corr_type=w
; will output "theta" (= r_p) and bin_i_i (= w_gg)
input_section_name=galaxy_power
output_section_name=projected_galaxy_power
ell_min_extrapolate=%(ell_min)s
ell_max_extrapolate=%(ell_max)s
theta_min=%(th_min)s
theta_max=%(th_max)s
[project_gI]
file=cosmosis-standard-library/shear/cl_to_corr/cl_to_corr.py
corr_type=gamma
; will output "theta" (= r_p) and bin_i_i (= w_g+)
input_section_name=galaxy_intrinsic_power
output_section_name=projected_galaxy_intrinsic
ell_min_extrapolate=%(ell_min)s
ell_max_extrapolate=%(ell_max)s
theta_min=%(th_min)s
theta_max=%(th_max)s
[project_II]
file=cosmosis-standard-library/shear/cl_to_corr/cl_to_corr.py
; will output "theta" (= r_p) and "xiplus" and "ximinus", which should be summed for w_++ (Singh et al., 2016)
corr_type=xi
input_section_name=intrinsic_power
output_section_name=projected_intrinsic
ell_min_extrapolate=%(ell_min)s
ell_max_extrapolate=%(ell_max)s
theta_min=%(th_min)s
theta_max=%(th_max)s

; these final modules compute redshift window functions W(z) from sample redshift
; distributions n(z) according to Mandelbaum et al., 2011. The Hankel-transformed
; 3D correlation functions w(r, z) are then integrated over the window functions
; to yield our desired projected correlation functions w(r)
[collect_wgg]
file=%(wdir)s/projected_alignments_interface.py
input_section_name=projected_galaxy_power
; specify 2x n(z)'s, one for each side of the 2-point correlation
nz_sections=nz_test nz_test
corr_type=wgg
[collect_wgp]
file=%(wdir)s/projected_alignments_interface.py
input_section_name=projected_galaxy_intrinsic
; for wg+, the 2nd n(z) denotes the shapes sample
nz_sections=nz_test nz_test
corr_type=wgp
[collect_wpp]
file=%(wdir)s/projected_alignments_interface.py
input_section_name=projected_intrinsic
nz_sections=nz_test nz_test
corr_type=wpp



